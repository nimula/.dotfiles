#!/usr/bin/env bash

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Skip for merge and message commits
if [[ "$COMMIT_SOURCE" == "merge" || "$COMMIT_SOURCE" == "message" ]]; then
  exit 0
fi

# Get staged diff
DIFF=$(git diff --cached)

# If no changes staged, allow normal commit
if [[ -z "$DIFF" ]]; then
  exit 0
fi

# Load .env if present
if [[ -f .env ]]; then
  export $(grep -v '^#' .env | xargs)
fi

# If no API key, skip AI and allow normal commit
if [[ -z "$OPENAI_API_KEY" ]]; then
  echo "[INFO] OPENAI_API_KEY is not set. Skipping AI-generated commit message."
  exit 0
fi

# Check if this is an amend commit
IS_AMEND=false
if [[ "$COMMIT_SOURCE" == "commit" && -n "$SHA1" ]]; then
  IS_AMEND=true
fi

# Define open ai
MODEL="gpt-4.1"

read -r -d "" CONVENTIONAL_COMMITS << EOP
# Conventional commits
#
# <type>[optional scope]: <description>
#
# [optional body]
#
# [optional footer(s)]
#
# Type must be one of the following:
# build: Changes that affect the build system or external dependencies
# ci: Changes to our CI configuration files and scripts
# docs: Documentation only changes
# feat: A new feature
# fix: A bug fix
# perf: A code change that improves performance
# refactor: A code change that neither fixes a bug nor adds a feature
# style: Changes that do not affect the meaning of the code
#        (white-space, formatting, missing semi-colons, etc)
# test: Adding missing tests or correcting existing tests
#
EOP

# Set different prompt based on amend or normal commit
if $IS_AMEND; then
  read -r -d "" PROMPT << EOP
You are generating a commit message to supplement the previous commit.
Analyze the additional changes in this amendment and summarize their main purpose or effect as a subject line (first line), following the Conventional Commits format (e.g., build:, ci:, docs:, feat:, fix:, perf:, refactor:, style:, test:). Keep it concise (max 80 characters).

Then, after a blank line, list specific changes introduced in this amendment as bullet points (-). Keep each point short and informative.

Rules:
- Use English
- Markdown formatting is allowed, but do not include code fences (like triple backticks) or explanations
- Return the message only
EOP
else
  read -r -d "" PROMPT << EOP
You are a commit message generator. Based on the provided git diff, analyze the change and determine the main purpose or effect of the change. Use that as the subject line (first line) following the Conventional Commits format (e.g., feat:, fix:, refactor:, doc:, chore:, etc..).
Then, in the body (after a blank line), list the key implementation changes as bullet points (-).

Rules:
- Use English
- Keep the subject line under 80 characters
- Markdown formatting is allowed, but do not include code fences (like triple backticks) or explanations
- Return the message only

Example output:
feat(component): add new validation to login form

- add error messages for empty input
- validate email format with regex
- update tests for invalid scenarios
EOP
fi

read -r -d "" PROMPT_PR << EOP
As a PR title generation assistant, your task is to generate concise titles.
 Rules: 1. Use English 2. Focus only on the main change direction 3. Don't list
 details or use semicolons 4. Follow conventional commit format
 (feat/fix/docs/refactor/chore) 5. Format should be 'type: brief description
 (#issue)' 6. Remove (#issue) if no issue exists 7. Return title directly.
EOP

# Build OpenAI request payload
JSON_PROMPT=$(jq -n \
  --arg sys "$PROMPT" \
  --arg usr "$DIFF" \
  '[
    { "role": "system", "content": $sys },
    { "role": "user", "content": $usr }
  ]'
)

# Inform user before API call
echo -e "\033[1;34m[INFO]\033[0m Calling OpenAI API to generate commit message. Please wait..."

# Call OpenAI API
RESPONSE=$(curl -s -w "\n%{http_code}" https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d @- <<EOF
{
  "model": "$MODEL",
  "messages": $JSON_PROMPT,
  "max_completion_tokens": 300,
  "temperature": 0.4
}
EOF
)

# Split response into body and HTTP status
HTTP_BODY=$(echo "$RESPONSE" | sed '$d')
HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)

# Abort if API call failed
if [[ "$HTTP_STATUS" -ne 200 ]]; then
  echo -e "\033[1;31m[ERROR]\033[0m OpenAI API call failed (HTTP $HTTP_STATUS). Aborting commit."
  echo "$HTTP_BODY"
  exit 1
fi

# Extract commit message
COMMIT_MESSAGE=$(echo "$HTTP_BODY" | jq -r '.choices[0].message.content' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Abort if message invalid
if [[ -z "$COMMIT_MESSAGE" || "$COMMIT_MESSAGE" == "null" ]]; then
  echo -e "\033[1;31m[ERROR]\033[0m Received empty commit message from OpenAI. Aborting commit."
  echo "$HTTP_BODY"
  exit 1
fi

# Insert AI message before existing commit message
EXISTING_MSG=$(cat "$COMMIT_MSG_FILE")
echo -e "$COMMIT_MESSAGE\n\n$EXISTING_MSG\n\n$CONVENTIONAL_COMMITS" > "$COMMIT_MSG_FILE"
